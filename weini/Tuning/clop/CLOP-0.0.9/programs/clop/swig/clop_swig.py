# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_clop_swig', [dirname(__file__)])
        except ImportError:
            import _clop_swig
            return _clop_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_clop_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _clop_swig = swig_import_helper()
    del swig_import_helper
else:
    import _clop_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def hardware_concurrency():
  return _clop_swig.hardware_concurrency()
hardware_concurrency = _clop_swig.hardware_concurrency
class Random(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Random, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Random, name)
    __repr__ = _swig_repr
    def __init__(self, n=0): 
        this = _clop_swig.new_Random(n)
        try: self.this.append(this)
        except: self.this = this
    def Seed(self, *args): return _clop_swig.Random_Seed(self, *args)
    def NewValue(self): return _clop_swig.Random_NewValue(self)
    def NextDouble(self): return _clop_swig.Random_NextDouble(self)
    def NextGaussian(self): return _clop_swig.Random_NextGaussian(self)
    def NextExponential(self): return _clop_swig.Random_NextExponential(self)
    def BinaryWrite(self, *args): return _clop_swig.Random_BinaryWrite(self, *args)
    def BinaryRead(self, *args): return _clop_swig.Random_BinaryRead(self, *args)
    __swig_destroy__ = _clop_swig.delete_Random
    __del__ = lambda self : None;
Random_swigregister = _clop_swig.Random_swigregister
Random_swigregister(Random)

class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_doubleArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _clop_swig.delete_doubleArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _clop_swig.doubleArray___getitem__(self, *args)
    def __setitem__(self, *args): return _clop_swig.doubleArray___setitem__(self, *args)
    def cast(self): return _clop_swig.doubleArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _clop_swig.doubleArray_frompointer
    if _newclass:frompointer = staticmethod(_clop_swig.doubleArray_frompointer)
doubleArray_swigregister = _clop_swig.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(*args):
  return _clop_swig.doubleArray_frompointer(*args)
doubleArray_frompointer = _clop_swig.doubleArray_frompointer

class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_intArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _clop_swig.delete_intArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _clop_swig.intArray___getitem__(self, *args)
    def __setitem__(self, *args): return _clop_swig.intArray___setitem__(self, *args)
    def cast(self): return _clop_swig.intArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _clop_swig.intArray_frompointer
    if _newclass:frompointer = staticmethod(_clop_swig.intArray_frompointer)
intArray_swigregister = _clop_swig.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(*args):
  return _clop_swig.intArray_frompointer(*args)
intArray_frompointer = _clop_swig.intArray_frompointer

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _clop_swig.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _clop_swig.SwigPyIterator_value(self)
    def incr(self, n=1): return _clop_swig.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _clop_swig.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _clop_swig.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _clop_swig.SwigPyIterator_equal(self, *args)
    def copy(self): return _clop_swig.SwigPyIterator_copy(self)
    def next(self): return _clop_swig.SwigPyIterator_next(self)
    def __next__(self): return _clop_swig.SwigPyIterator___next__(self)
    def previous(self): return _clop_swig.SwigPyIterator_previous(self)
    def advance(self, *args): return _clop_swig.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _clop_swig.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _clop_swig.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _clop_swig.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _clop_swig.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _clop_swig.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _clop_swig.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _clop_swig.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectord, name)
    __repr__ = _swig_repr
    def iterator(self): return _clop_swig.vectord_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _clop_swig.vectord___nonzero__(self)
    def __bool__(self): return _clop_swig.vectord___bool__(self)
    def __len__(self): return _clop_swig.vectord___len__(self)
    def pop(self): return _clop_swig.vectord_pop(self)
    def __getslice__(self, *args): return _clop_swig.vectord___getslice__(self, *args)
    def __setslice__(self, *args): return _clop_swig.vectord___setslice__(self, *args)
    def __delslice__(self, *args): return _clop_swig.vectord___delslice__(self, *args)
    def __delitem__(self, *args): return _clop_swig.vectord___delitem__(self, *args)
    def __getitem__(self, *args): return _clop_swig.vectord___getitem__(self, *args)
    def __setitem__(self, *args): return _clop_swig.vectord___setitem__(self, *args)
    def append(self, *args): return _clop_swig.vectord_append(self, *args)
    def empty(self): return _clop_swig.vectord_empty(self)
    def size(self): return _clop_swig.vectord_size(self)
    def clear(self): return _clop_swig.vectord_clear(self)
    def swap(self, *args): return _clop_swig.vectord_swap(self, *args)
    def get_allocator(self): return _clop_swig.vectord_get_allocator(self)
    def begin(self): return _clop_swig.vectord_begin(self)
    def end(self): return _clop_swig.vectord_end(self)
    def rbegin(self): return _clop_swig.vectord_rbegin(self)
    def rend(self): return _clop_swig.vectord_rend(self)
    def pop_back(self): return _clop_swig.vectord_pop_back(self)
    def erase(self, *args): return _clop_swig.vectord_erase(self, *args)
    def __init__(self, *args): 
        this = _clop_swig.new_vectord(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _clop_swig.vectord_push_back(self, *args)
    def front(self): return _clop_swig.vectord_front(self)
    def back(self): return _clop_swig.vectord_back(self)
    def assign(self, *args): return _clop_swig.vectord_assign(self, *args)
    def resize(self, *args): return _clop_swig.vectord_resize(self, *args)
    def insert(self, *args): return _clop_swig.vectord_insert(self, *args)
    def reserve(self, *args): return _clop_swig.vectord_reserve(self, *args)
    def capacity(self): return _clop_swig.vectord_capacity(self)
    __swig_destroy__ = _clop_swig.delete_vectord
    __del__ = lambda self : None;
vectord_swigregister = _clop_swig.vectord_swigregister
vectord_swigregister(vectord)

class slist(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, slist, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, slist, name)
    __repr__ = _swig_repr
    def iterator(self): return _clop_swig.slist_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _clop_swig.slist___nonzero__(self)
    def __bool__(self): return _clop_swig.slist___bool__(self)
    def __len__(self): return _clop_swig.slist___len__(self)
    def pop(self): return _clop_swig.slist_pop(self)
    def __getslice__(self, *args): return _clop_swig.slist___getslice__(self, *args)
    def __setslice__(self, *args): return _clop_swig.slist___setslice__(self, *args)
    def __delslice__(self, *args): return _clop_swig.slist___delslice__(self, *args)
    def __delitem__(self, *args): return _clop_swig.slist___delitem__(self, *args)
    def __getitem__(self, *args): return _clop_swig.slist___getitem__(self, *args)
    def __setitem__(self, *args): return _clop_swig.slist___setitem__(self, *args)
    def append(self, *args): return _clop_swig.slist_append(self, *args)
    def empty(self): return _clop_swig.slist_empty(self)
    def size(self): return _clop_swig.slist_size(self)
    def clear(self): return _clop_swig.slist_clear(self)
    def swap(self, *args): return _clop_swig.slist_swap(self, *args)
    def get_allocator(self): return _clop_swig.slist_get_allocator(self)
    def begin(self): return _clop_swig.slist_begin(self)
    def end(self): return _clop_swig.slist_end(self)
    def rbegin(self): return _clop_swig.slist_rbegin(self)
    def rend(self): return _clop_swig.slist_rend(self)
    def pop_back(self): return _clop_swig.slist_pop_back(self)
    def erase(self, *args): return _clop_swig.slist_erase(self, *args)
    def __init__(self, *args): 
        this = _clop_swig.new_slist(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _clop_swig.slist_push_back(self, *args)
    def front(self): return _clop_swig.slist_front(self)
    def back(self): return _clop_swig.slist_back(self)
    def assign(self, *args): return _clop_swig.slist_assign(self, *args)
    def resize(self, *args): return _clop_swig.slist_resize(self, *args)
    def insert(self, *args): return _clop_swig.slist_insert(self, *args)
    def pop_front(self): return _clop_swig.slist_pop_front(self)
    def push_front(self, *args): return _clop_swig.slist_push_front(self, *args)
    def reverse(self): return _clop_swig.slist_reverse(self)
    __swig_destroy__ = _clop_swig.delete_slist
    __del__ = lambda self : None;
slist_swigregister = _clop_swig.slist_swigregister
slist_swigregister(slist)

class CResults(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CResults, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CResults, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CResults(*args)
        try: self.this.append(this)
        except: self.this = this
    def AddSample(self, *args): return _clop_swig.CResults_AddSample(self, *args)
    def AddOutcome(self, *args): return _clop_swig.CResults_AddOutcome(self, *args)
    def Reset(self): return _clop_swig.CResults_Reset(self)
    def Refresh(self): return _clop_swig.CResults_Refresh(self)
    def Reserve(self, *args): return _clop_swig.CResults_Reserve(self, *args)
    def GetDimensions(self): return _clop_swig.CResults_GetDimensions(self)
    def GetSamples(self): return _clop_swig.CResults_GetSamples(self)
    def GetSample(self, *args): return _clop_swig.CResults_GetSample(self, *args)
    def GetOutcome(self, *args): return _clop_swig.CResults_GetOutcome(self, *args)
    def CountOutcomes(self, *args): return _clop_swig.CResults_CountOutcomes(self, *args)
    __swig_destroy__ = _clop_swig.delete_CResults
    __del__ = lambda self : None;
CResults_swigregister = _clop_swig.CResults_swigregister
CResults_swigregister(CResults)

class COutcome(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, COutcome, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, COutcome, name)
    __repr__ = _swig_repr
    Loss = _clop_swig.COutcome_Loss
    Win = _clop_swig.COutcome_Win
    Draw = _clop_swig.COutcome_Draw
    Outcomes = _clop_swig.COutcome_Outcomes
    Unknown = _clop_swig.COutcome_Unknown
    InProgress = _clop_swig.COutcome_InProgress
    AllOutcomes = _clop_swig.COutcome_AllOutcomes
    def __init__(self, *args): 
        this = _clop_swig.new_COutcome(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _clop_swig.COutcome___eq__(self, *args)
    def __ne__(self, *args): return _clop_swig.COutcome___ne__(self, *args)
    __swig_destroy__ = _clop_swig.delete_COutcome
    __del__ = lambda self : None;
COutcome_swigregister = _clop_swig.COutcome_swigregister
COutcome_swigregister(COutcome)

class CArtificialProblem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CArtificialProblem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CArtificialProblem, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetOutcome(self, *args): return _clop_swig.CArtificialProblem_GetOutcome(self, *args)
    def Seed(self, *args): return _clop_swig.CArtificialProblem_Seed(self, *args)
    def GetDimensions(self): return _clop_swig.CArtificialProblem_GetDimensions(self)
    def GetStrength(self, *args): return _clop_swig.CArtificialProblem_GetStrength(self, *args)
    def GetProba(self, *args): return _clop_swig.CArtificialProblem_GetProba(self, *args)
    def GetOptimalProba(self): return _clop_swig.CArtificialProblem_GetOptimalProba(self)
    def GetOptimalParameters(self, *args): return _clop_swig.CArtificialProblem_GetOptimalParameters(self, *args)
    __swig_destroy__ = _clop_swig.delete_CArtificialProblem
    __del__ = lambda self : None;
CArtificialProblem_swigregister = _clop_swig.CArtificialProblem_swigregister
CArtificialProblem_swigregister(CArtificialProblem)

class CPQuadratic1D(CArtificialProblem):
    __swig_setmethods__ = {}
    for _s in [CArtificialProblem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPQuadratic1D, name, value)
    __swig_getmethods__ = {}
    for _s in [CArtificialProblem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPQuadratic1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CPQuadratic1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetAlpha(self): return _clop_swig.CPQuadratic1D_GetAlpha(self)
    def GetBeta(self): return _clop_swig.CPQuadratic1D_GetBeta(self)
    def GetMu(self): return _clop_swig.CPQuadratic1D_GetMu(self)
    def GetStrength(self, *args): return _clop_swig.CPQuadratic1D_GetStrength(self, *args)
    def GetOptimalParameters(self, *args): return _clop_swig.CPQuadratic1D_GetOptimalParameters(self, *args)
    def GetDimensions(self): return _clop_swig.CPQuadratic1D_GetDimensions(self)
    __swig_destroy__ = _clop_swig.delete_CPQuadratic1D
    __del__ = lambda self : None;
CPQuadratic1D_swigregister = _clop_swig.CPQuadratic1D_swigregister
CPQuadratic1D_swigregister(CPQuadratic1D)

class CPQuadratic2D(CArtificialProblem):
    __swig_setmethods__ = {}
    for _s in [CArtificialProblem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPQuadratic2D, name, value)
    __swig_getmethods__ = {}
    for _s in [CArtificialProblem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPQuadratic2D, name)
    __repr__ = _swig_repr
    def GetStrength(self, *args): return _clop_swig.CPQuadratic2D_GetStrength(self, *args)
    def GetDimensions(self): return _clop_swig.CPQuadratic2D_GetDimensions(self)
    def GetOptimalParameters(self, *args): return _clop_swig.CPQuadratic2D_GetOptimalParameters(self, *args)
    def __init__(self): 
        this = _clop_swig.new_CPQuadratic2D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _clop_swig.delete_CPQuadratic2D
    __del__ = lambda self : None;
CPQuadratic2D_swigregister = _clop_swig.CPQuadratic2D_swigregister
CPQuadratic2D_swigregister(CPQuadratic2D)

class CPQuadraticND(CArtificialProblem):
    __swig_setmethods__ = {}
    for _s in [CArtificialProblem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPQuadraticND, name, value)
    __swig_getmethods__ = {}
    for _s in [CArtificialProblem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPQuadraticND, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetStrength(self, *args): return _clop_swig.CPQuadraticND_GetStrength(self, *args)
    def GetDimensions(self): return _clop_swig.CPQuadraticND_GetDimensions(self)
    __swig_destroy__ = _clop_swig.delete_CPQuadraticND
    __del__ = lambda self : None;
CPQuadraticND_swigregister = _clop_swig.CPQuadraticND_swigregister
CPQuadraticND_swigregister(CPQuadraticND)

class CPLog1D(CArtificialProblem):
    __swig_setmethods__ = {}
    for _s in [CArtificialProblem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPLog1D, name, value)
    __swig_getmethods__ = {}
    for _s in [CArtificialProblem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPLog1D, name)
    __repr__ = _swig_repr
    def GetStrength(self, *args): return _clop_swig.CPLog1D_GetStrength(self, *args)
    def GetOptimalParameters(self, *args): return _clop_swig.CPLog1D_GetOptimalParameters(self, *args)
    def GetDimensions(self): return _clop_swig.CPLog1D_GetDimensions(self)
    def __init__(self): 
        this = _clop_swig.new_CPLog1D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _clop_swig.delete_CPLog1D
    __del__ = lambda self : None;
CPLog1D_swigregister = _clop_swig.CPLog1D_swigregister
CPLog1D_swigregister(CPLog1D)

class CPDiscontinuous(CArtificialProblem):
    __swig_setmethods__ = {}
    for _s in [CArtificialProblem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPDiscontinuous, name, value)
    __swig_getmethods__ = {}
    for _s in [CArtificialProblem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPDiscontinuous, name)
    __repr__ = _swig_repr
    def GetStrength(self, *args): return _clop_swig.CPDiscontinuous_GetStrength(self, *args)
    def GetOptimalParameters(self, *args): return _clop_swig.CPDiscontinuous_GetOptimalParameters(self, *args)
    def GetDimensions(self): return _clop_swig.CPDiscontinuous_GetDimensions(self)
    def __init__(self): 
        this = _clop_swig.new_CPDiscontinuous()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _clop_swig.delete_CPDiscontinuous
    __del__ = lambda self : None;
CPDiscontinuous_swigregister = _clop_swig.CPDiscontinuous_swigregister
CPDiscontinuous_swigregister(CPDiscontinuous)

class CPPositive(CArtificialProblem):
    __swig_setmethods__ = {}
    for _s in [CArtificialProblem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPPositive, name, value)
    __swig_getmethods__ = {}
    for _s in [CArtificialProblem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPPositive, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _clop_swig.new_CPPositive()
        try: self.this.append(this)
        except: self.this = this
    def GetStrength(self, *args): return _clop_swig.CPPositive_GetStrength(self, *args)
    def GetOptimalParameters(self, *args): return _clop_swig.CPPositive_GetOptimalParameters(self, *args)
    def GetDimensions(self): return _clop_swig.CPPositive_GetDimensions(self)
    __swig_destroy__ = _clop_swig.delete_CPPositive
    __del__ = lambda self : None;
CPPositive_swigregister = _clop_swig.CPPositive_swigregister
CPPositive_swigregister(CPPositive)

class CPComplicated1D(CArtificialProblem):
    __swig_setmethods__ = {}
    for _s in [CArtificialProblem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPComplicated1D, name, value)
    __swig_getmethods__ = {}
    for _s in [CArtificialProblem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPComplicated1D, name)
    __repr__ = _swig_repr
    def GetStrength(self, *args): return _clop_swig.CPComplicated1D_GetStrength(self, *args)
    def GetOptimalParameters(self, *args): return _clop_swig.CPComplicated1D_GetOptimalParameters(self, *args)
    def GetDimensions(self): return _clop_swig.CPComplicated1D_GetDimensions(self)
    def __init__(self): 
        this = _clop_swig.new_CPComplicated1D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _clop_swig.delete_CPComplicated1D
    __del__ = lambda self : None;
CPComplicated1D_swigregister = _clop_swig.CPComplicated1D_swigregister
CPComplicated1D_swigregister(CPComplicated1D)

class CPNonQuadratic2D(CArtificialProblem):
    __swig_setmethods__ = {}
    for _s in [CArtificialProblem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPNonQuadratic2D, name, value)
    __swig_getmethods__ = {}
    for _s in [CArtificialProblem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPNonQuadratic2D, name)
    __repr__ = _swig_repr
    def GetStrength(self, *args): return _clop_swig.CPNonQuadratic2D_GetStrength(self, *args)
    def GetOptimalParameters(self, *args): return _clop_swig.CPNonQuadratic2D_GetOptimalParameters(self, *args)
    def GetDimensions(self): return _clop_swig.CPNonQuadratic2D_GetDimensions(self)
    def __init__(self): 
        this = _clop_swig.new_CPNonQuadratic2D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _clop_swig.delete_CPNonQuadratic2D
    __del__ = lambda self : None;
CPNonQuadratic2D_swigregister = _clop_swig.CPNonQuadratic2D_swigregister
CPNonQuadratic2D_swigregister(CPNonQuadratic2D)

class CPNonQuadraticND(CArtificialProblem):
    __swig_setmethods__ = {}
    for _s in [CArtificialProblem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPNonQuadraticND, name, value)
    __swig_getmethods__ = {}
    for _s in [CArtificialProblem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPNonQuadraticND, name)
    __repr__ = _swig_repr
    def __init__(self, Dimensions=1): 
        this = _clop_swig.new_CPNonQuadraticND(Dimensions)
        try: self.this.append(this)
        except: self.this = this
    def GetStrength(self, *args): return _clop_swig.CPNonQuadraticND_GetStrength(self, *args)
    def GetOptimalProba(self): return _clop_swig.CPNonQuadraticND_GetOptimalProba(self)
    def GetOptimalParameters(self, *args): return _clop_swig.CPNonQuadraticND_GetOptimalParameters(self, *args)
    def GetDimensions(self): return _clop_swig.CPNonQuadraticND_GetDimensions(self)
    __swig_destroy__ = _clop_swig.delete_CPNonQuadraticND
    __del__ = lambda self : None;
CPNonQuadraticND_swigregister = _clop_swig.CPNonQuadraticND_swigregister
CPNonQuadraticND_swigregister(CPNonQuadraticND)

class CPZeroND(CArtificialProblem):
    __swig_setmethods__ = {}
    for _s in [CArtificialProblem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPZeroND, name, value)
    __swig_getmethods__ = {}
    for _s in [CArtificialProblem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPZeroND, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetStrength(self, *args): return _clop_swig.CPZeroND_GetStrength(self, *args)
    def GetProba(self, *args): return _clop_swig.CPZeroND_GetProba(self, *args)
    def GetDimensions(self): return _clop_swig.CPZeroND_GetDimensions(self)
    __swig_destroy__ = _clop_swig.delete_CPZeroND
    __del__ = lambda self : None;
CPZeroND_swigregister = _clop_swig.CPZeroND_swigregister
CPZeroND_swigregister(CPZeroND)

class CPAbsND(CArtificialProblem):
    __swig_setmethods__ = {}
    for _s in [CArtificialProblem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPAbsND, name, value)
    __swig_getmethods__ = {}
    for _s in [CArtificialProblem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPAbsND, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CPAbsND(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetStrength(self, *args): return _clop_swig.CPAbsND_GetStrength(self, *args)
    def GetOptimalParameters(self, *args): return _clop_swig.CPAbsND_GetOptimalParameters(self, *args)
    def GetDimensions(self): return _clop_swig.CPAbsND_GetDimensions(self)
    __swig_destroy__ = _clop_swig.delete_CPAbsND
    __del__ = lambda self : None;
CPAbsND_swigregister = _clop_swig.CPAbsND_swigregister
CPAbsND_swigregister(CPAbsND)

class CPFish1D(CArtificialProblem):
    __swig_setmethods__ = {}
    for _s in [CArtificialProblem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPFish1D, name, value)
    __swig_getmethods__ = {}
    for _s in [CArtificialProblem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPFish1D, name)
    __repr__ = _swig_repr
    def __init__(self, a=0.1): 
        this = _clop_swig.new_CPFish1D(a)
        try: self.this.append(this)
        except: self.this = this
    def GetProba(self, *args): return _clop_swig.CPFish1D_GetProba(self, *args)
    def GetStrength(self, *args): return _clop_swig.CPFish1D_GetStrength(self, *args)
    def GetOptimalParameters(self, *args): return _clop_swig.CPFish1D_GetOptimalParameters(self, *args)
    def GetDimensions(self): return _clop_swig.CPFish1D_GetDimensions(self)
    __swig_destroy__ = _clop_swig.delete_CPFish1D
    __del__ = lambda self : None;
CPFish1D_swigregister = _clop_swig.CPFish1D_swigregister
CPFish1D_swigregister(CPFish1D)

class CPDonut(CArtificialProblem):
    __swig_setmethods__ = {}
    for _s in [CArtificialProblem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPDonut, name, value)
    __swig_getmethods__ = {}
    for _s in [CArtificialProblem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPDonut, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CPDonut(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetStrength(self, *args): return _clop_swig.CPDonut_GetStrength(self, *args)
    def GetOptimalParameters(self, *args): return _clop_swig.CPDonut_GetOptimalParameters(self, *args)
    def GetDimensions(self): return _clop_swig.CPDonut_GetDimensions(self)
    __swig_destroy__ = _clop_swig.delete_CPDonut
    __del__ = lambda self : None;
CPDonut_swigregister = _clop_swig.CPDonut_swigregister
CPDonut_swigregister(CPDonut)

class CPParametric(CArtificialProblem):
    __swig_setmethods__ = {}
    for _s in [CArtificialProblem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPParametric, name, value)
    __swig_getmethods__ = {}
    for _s in [CArtificialProblem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPParametric, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CPParametric(*args)
        try: self.this.append(this)
        except: self.this = this
        #check-pythonappend CPParametric::CPParametric
        self.pf_reference = args[0]



    def GetStrength(self, *args): return _clop_swig.CPParametric_GetStrength(self, *args)
    def GetOptimalParameters(self, *args): return _clop_swig.CPParametric_GetOptimalParameters(self, *args)
    def GetDimensions(self): return _clop_swig.CPParametric_GetDimensions(self)
    __swig_destroy__ = _clop_swig.delete_CPParametric
    __del__ = lambda self : None;
CPParametric_swigregister = _clop_swig.CPParametric_swigregister
CPParametric_swigregister(CPParametric)

class CPRosenbrock(CArtificialProblem):
    __swig_setmethods__ = {}
    for _s in [CArtificialProblem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPRosenbrock, name, value)
    __swig_getmethods__ = {}
    for _s in [CArtificialProblem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPRosenbrock, name)
    __repr__ = _swig_repr
    def GetStrength(self, *args): return _clop_swig.CPRosenbrock_GetStrength(self, *args)
    def GetDimensions(self): return _clop_swig.CPRosenbrock_GetDimensions(self)
    def GetOptimalParameters(self, *args): return _clop_swig.CPRosenbrock_GetOptimalParameters(self, *args)
    def __init__(self): 
        this = _clop_swig.new_CPRosenbrock()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _clop_swig.delete_CPRosenbrock
    __del__ = lambda self : None;
CPRosenbrock_swigregister = _clop_swig.CPRosenbrock_swigregister
CPRosenbrock_swigregister(CPRosenbrock)

class CPVolcano(CArtificialProblem):
    __swig_setmethods__ = {}
    for _s in [CArtificialProblem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPVolcano, name, value)
    __swig_getmethods__ = {}
    for _s in [CArtificialProblem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPVolcano, name)
    __repr__ = _swig_repr
    def __init__(self, dimensions=2, alpha=0.3): 
        this = _clop_swig.new_CPVolcano(dimensions, alpha)
        try: self.this.append(this)
        except: self.this = this
    def GetStrength(self, *args): return _clop_swig.CPVolcano_GetStrength(self, *args)
    def GetDimensions(self): return _clop_swig.CPVolcano_GetDimensions(self)
    def GetOptimalParameters(self, *args): return _clop_swig.CPVolcano_GetOptimalParameters(self, *args)
    __swig_destroy__ = _clop_swig.delete_CPVolcano
    __del__ = lambda self : None;
CPVolcano_swigregister = _clop_swig.CPVolcano_swigregister
CPVolcano_swigregister(CPVolcano)

class COlivier(CArtificialProblem):
    __swig_setmethods__ = {}
    for _s in [CArtificialProblem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, COlivier, name, value)
    __swig_getmethods__ = {}
    for _s in [CArtificialProblem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, COlivier, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetDimensions(self): return _clop_swig.COlivier_GetDimensions(self)
    def GetStrength(self, *args): return _clop_swig.COlivier_GetStrength(self, *args)
    def GetProba(self, *args): return _clop_swig.COlivier_GetProba(self, *args)
    __swig_destroy__ = _clop_swig.delete_COlivier
    __del__ = lambda self : None;
COlivier_swigregister = _clop_swig.COlivier_swigregister
COlivier_swigregister(COlivier)

class CPSinExp(CArtificialProblem):
    __swig_setmethods__ = {}
    for _s in [CArtificialProblem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPSinExp, name, value)
    __swig_getmethods__ = {}
    for _s in [CArtificialProblem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPSinExp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CPSinExp(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetStrength(self, *args): return _clop_swig.CPSinExp_GetStrength(self, *args)
    def GetOptimalParameters(self, *args): return _clop_swig.CPSinExp_GetOptimalParameters(self, *args)
    def GetDimensions(self): return _clop_swig.CPSinExp_GetDimensions(self)
    __swig_destroy__ = _clop_swig.delete_CPSinExp
    __del__ = lambda self : None;
CPSinExp_swigregister = _clop_swig.CPSinExp_swigregister
CPSinExp_swigregister(CPSinExp)

class CPFlat(CArtificialProblem):
    __swig_setmethods__ = {}
    for _s in [CArtificialProblem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPFlat, name, value)
    __swig_getmethods__ = {}
    for _s in [CArtificialProblem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPFlat, name)
    __repr__ = _swig_repr
    def __init__(self, Dimensions=1): 
        this = _clop_swig.new_CPFlat(Dimensions)
        try: self.this.append(this)
        except: self.this = this
    def GetStrength(self, *args): return _clop_swig.CPFlat_GetStrength(self, *args)
    def GetDimensions(self): return _clop_swig.CPFlat_GetDimensions(self)
    def GetOptimalParameters(self, *args): return _clop_swig.CPFlat_GetOptimalParameters(self, *args)
    __swig_destroy__ = _clop_swig.delete_CPFlat
    __del__ = lambda self : None;
CPFlat_swigregister = _clop_swig.CPFlat_swigregister
CPFlat_swigregister(CPFlat)

class CPIllIndependent(CArtificialProblem):
    __swig_setmethods__ = {}
    for _s in [CArtificialProblem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPIllIndependent, name, value)
    __swig_getmethods__ = {}
    for _s in [CArtificialProblem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPIllIndependent, name)
    __repr__ = _swig_repr
    def GetStrength(self, *args): return _clop_swig.CPIllIndependent_GetStrength(self, *args)
    def GetDimensions(self): return _clop_swig.CPIllIndependent_GetDimensions(self)
    def GetOptimalParameters(self, *args): return _clop_swig.CPIllIndependent_GetOptimalParameters(self, *args)
    def __init__(self): 
        this = _clop_swig.new_CPIllIndependent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _clop_swig.delete_CPIllIndependent
    __del__ = lambda self : None;
CPIllIndependent_swigregister = _clop_swig.CPIllIndependent_swigregister
CPIllIndependent_swigregister(CPIllIndependent)

class CPIllCorrelated(CArtificialProblem):
    __swig_setmethods__ = {}
    for _s in [CArtificialProblem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPIllCorrelated, name, value)
    __swig_getmethods__ = {}
    for _s in [CArtificialProblem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPIllCorrelated, name)
    __repr__ = _swig_repr
    def GetStrength(self, *args): return _clop_swig.CPIllCorrelated_GetStrength(self, *args)
    def GetDimensions(self): return _clop_swig.CPIllCorrelated_GetDimensions(self)
    def GetOptimalParameters(self, *args): return _clop_swig.CPIllCorrelated_GetOptimalParameters(self, *args)
    def __init__(self): 
        this = _clop_swig.new_CPIllCorrelated()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _clop_swig.delete_CPIllCorrelated
    __del__ = lambda self : None;
CPIllCorrelated_swigregister = _clop_swig.CPIllCorrelated_swigregister
CPIllCorrelated_swigregister(CPIllCorrelated)

class CPPower1D(CArtificialProblem):
    __swig_setmethods__ = {}
    for _s in [CArtificialProblem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPPower1D, name, value)
    __swig_getmethods__ = {}
    for _s in [CArtificialProblem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPPower1D, name)
    __repr__ = _swig_repr
    def __init__(self, SquareMagnitude=0.2, Power=20.0): 
        this = _clop_swig.new_CPPower1D(SquareMagnitude, Power)
        try: self.this.append(this)
        except: self.this = this
    def GetStrength(self, *args): return _clop_swig.CPPower1D_GetStrength(self, *args)
    def GetDimensions(self): return _clop_swig.CPPower1D_GetDimensions(self)
    def GetOptimalParameters(self, *args): return _clop_swig.CPPower1D_GetOptimalParameters(self, *args)
    __swig_destroy__ = _clop_swig.delete_CPPower1D
    __del__ = lambda self : None;
CPPower1D_swigregister = _clop_swig.CPPower1D_swigregister
CPPower1D_swigregister(CPPower1D)

class CPMultiple(CArtificialProblem):
    __swig_setmethods__ = {}
    for _s in [CArtificialProblem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPMultiple, name, value)
    __swig_getmethods__ = {}
    for _s in [CArtificialProblem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPMultiple, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CPMultiple(*args)
        try: self.this.append(this)
        except: self.this = this
        #check-pythonappend CPMultiple::CPMultiple
        self.problem_reference = args[1]



    def GetStrength(self, *args): return _clop_swig.CPMultiple_GetStrength(self, *args)
    def GetDimensions(self): return _clop_swig.CPMultiple_GetDimensions(self)
    def GetOptimalParameters(self, *args): return _clop_swig.CPMultiple_GetOptimalParameters(self, *args)
    __swig_destroy__ = _clop_swig.delete_CPMultiple
    __del__ = lambda self : None;
CPMultiple_swigregister = _clop_swig.CPMultiple_swigregister
CPMultiple_swigregister(CPMultiple)

class CObserver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CObserver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CObserver, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CObserver(*args)
        try: self.this.append(this)
        except: self.this = this
    def OnReset(self): return _clop_swig.CObserver_OnReset(self)
    def OnSample(self): return _clop_swig.CObserver_OnSample(self)
    def OnOutcome(self, *args): return _clop_swig.CObserver_OnOutcome(self, *args)
    def OnRefresh(self): return _clop_swig.CObserver_OnRefresh(self)
    __swig_destroy__ = _clop_swig.delete_CObserver
    __del__ = lambda self : None;
CObserver_swigregister = _clop_swig.CObserver_swigregister
CObserver_swigregister(CObserver)

class CRegression(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRegression, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRegression, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CRegression(*args)
        try: self.this.append(this)
        except: self.this = this
        #check-pythonappend CRegression::CRegression
        self.results_reference = args[0]
        self.pf_reference = args[1]



    def GetPF(self): return _clop_swig.CRegression_GetPF(self)
    def SetDrawRating(self, *args): return _clop_swig.CRegression_SetDrawRating(self, *args)
    def ResultProbability(self, *args): return _clop_swig.CRegression_ResultProbability(self, *args)
    def WinRate(self, *args): return _clop_swig.CRegression_WinRate(self, *args)
    def Rating(self, *args): return _clop_swig.CRegression_Rating(self, *args)
    def SetRefreshRate(self, *args): return _clop_swig.CRegression_SetRefreshRate(self, *args)
    def Refresh(self): return _clop_swig.CRegression_Refresh(self)
    def MAP(self): return _clop_swig.CRegression_MAP(self)
    def GaussianSample(self, *args): return _clop_swig.CRegression_GaussianSample(self, *args)
    def MCMCSample(self, *args): return _clop_swig.CRegression_MCMCSample(self, *args)
    def GetParamPositivity(self, *args): return _clop_swig.CRegression_GetParamPositivity(self, *args)
    def GetPosteriorInfo(self, *args): return _clop_swig.CRegression_GetPosteriorInfo(self, *args)
    def Reserve(self, *args): return _clop_swig.CRegression_Reserve(self, *args)
    def GetSamples(self): return _clop_swig.CRegression_GetSamples(self)
    def GetSample(self, *args): return _clop_swig.CRegression_GetSample(self, *args)
    def GetReplications(self, *args): return _clop_swig.CRegression_GetReplications(self, *args)
    def GetSampleData(self, *args): return _clop_swig.CRegression_GetSampleData(self, *args)
    def GetOutcome(self, *args): return _clop_swig.CRegression_GetOutcome(self, *args)
    def GetCount(self, *args): return _clop_swig.CRegression_GetCount(self, *args)
    def GetLocalizationHeight(self): return _clop_swig.CRegression_GetLocalizationHeight(self)
    def GetLocalizationPower(self): return _clop_swig.CRegression_GetLocalizationPower(self)
    def GetMaxWeightIterations(self): return _clop_swig.CRegression_GetMaxWeightIterations(self)
    def SetLocalizationHeight(self, *args): return _clop_swig.CRegression_SetLocalizationHeight(self, *args)
    def SetLocalizationPower(self, *args): return _clop_swig.CRegression_SetLocalizationPower(self, *args)
    def SetMaxWeightIterations(self, *args): return _clop_swig.CRegression_SetMaxWeightIterations(self, *args)
    def SetAutoLocalize(self, *args): return _clop_swig.CRegression_SetAutoLocalize(self, *args)
    def SetUniformWeights(self): return _clop_swig.CRegression_SetUniformWeights(self)
    def LocalizationIteration(self): return _clop_swig.CRegression_LocalizationIteration(self)
    def ComputeLocalWeights(self): return _clop_swig.CRegression_ComputeLocalWeights(self)
    def GetMeanAndDeviation(self, *args): return _clop_swig.CRegression_GetMeanAndDeviation(self, *args)
    def GetSampleWeight(self, *args): return _clop_swig.CRegression_GetSampleWeight(self, *args)
    def GetLogWeight(self, *args): return _clop_swig.CRegression_GetLogWeight(self, *args)
    def GetWeight(self, *args): return _clop_swig.CRegression_GetWeight(self, *args)
    def GetTotalWeight(self): return _clop_swig.CRegression_GetTotalWeight(self)
    def GetTotalWeightedSample(self): return _clop_swig.CRegression_GetTotalWeightedSample(self)
    def GetAverageSample(self, *args): return _clop_swig.CRegression_GetAverageSample(self, *args)
    __swig_destroy__ = _clop_swig.delete_CRegression
    __del__ = lambda self : None;
CRegression_swigregister = _clop_swig.CRegression_swigregister
CRegression_swigregister(CRegression)

class CParametricFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CParametricFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CParametricFunction, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetDimensions(self): return _clop_swig.CParametricFunction_GetDimensions(self)
    def GetParameters(self): return _clop_swig.CParametricFunction_GetParameters(self)
    def DotProduct(self, *args): return _clop_swig.CParametricFunction_DotProduct(self, *args)
    def GetValue(self, *args): return _clop_swig.CParametricFunction_GetValue(self, *args)
    def GetMax(self, *args): return _clop_swig.CParametricFunction_GetMax(self, *args)
    def GetMonomials(self, *args): return _clop_swig.CParametricFunction_GetMonomials(self, *args)
    def GetGradient(self, *args): return _clop_swig.CParametricFunction_GetGradient(self, *args)
    def GetPriorStrength(self): return _clop_swig.CParametricFunction_GetPriorStrength(self)
    def SetPriorStrength(self, *args): return _clop_swig.CParametricFunction_SetPriorStrength(self, *args)
    def GetPriorParam(self, *args): return _clop_swig.CParametricFunction_GetPriorParam(self, *args)
    def GetPrior(self, *args): return _clop_swig.CParametricFunction_GetPrior(self, *args)
    def GetPriorGradient(self, *args): return _clop_swig.CParametricFunction_GetPriorGradient(self, *args)
    def GetPriorHessian(self, *args): return _clop_swig.CParametricFunction_GetPriorHessian(self, *args)
    __swig_destroy__ = _clop_swig.delete_CParametricFunction
    __del__ = lambda self : None;
CParametricFunction_swigregister = _clop_swig.CParametricFunction_swigregister
CParametricFunction_swigregister(CParametricFunction)

class CPFIndependentQuadratic(CParametricFunction):
    __swig_setmethods__ = {}
    for _s in [CParametricFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPFIndependentQuadratic, name, value)
    __swig_getmethods__ = {}
    for _s in [CParametricFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPFIndependentQuadratic, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CPFIndependentQuadratic(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetValue(self, *args): return _clop_swig.CPFIndependentQuadratic_GetValue(self, *args)
    def GetMax(self, *args): return _clop_swig.CPFIndependentQuadratic_GetMax(self, *args)
    def GetMonomials(self, *args): return _clop_swig.CPFIndependentQuadratic_GetMonomials(self, *args)
    def GetGradient(self, *args): return _clop_swig.CPFIndependentQuadratic_GetGradient(self, *args)
    __swig_destroy__ = _clop_swig.delete_CPFIndependentQuadratic
    __del__ = lambda self : None;
CPFIndependentQuadratic_swigregister = _clop_swig.CPFIndependentQuadratic_swigregister
CPFIndependentQuadratic_swigregister(CPFIndependentQuadratic)

class CPFQuadratic(CParametricFunction):
    __swig_setmethods__ = {}
    for _s in [CParametricFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPFQuadratic, name, value)
    __swig_getmethods__ = {}
    for _s in [CParametricFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPFQuadratic, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CPFQuadratic(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetValue(self, *args): return _clop_swig.CPFQuadratic_GetValue(self, *args)
    def GetMax(self, *args): return _clop_swig.CPFQuadratic_GetMax(self, *args)
    def GetMonomials(self, *args): return _clop_swig.CPFQuadratic_GetMonomials(self, *args)
    def GetGradient(self, *args): return _clop_swig.CPFQuadratic_GetGradient(self, *args)
    def GetHessian(self, *args): return _clop_swig.CPFQuadratic_GetHessian(self, *args)
    __swig_destroy__ = _clop_swig.delete_CPFQuadratic
    __del__ = lambda self : None;
CPFQuadratic_swigregister = _clop_swig.CPFQuadratic_swigregister
CPFQuadratic_swigregister(CPFQuadratic)

class CPFCubic(CParametricFunction):
    __swig_setmethods__ = {}
    for _s in [CParametricFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPFCubic, name, value)
    __swig_getmethods__ = {}
    for _s in [CParametricFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPFCubic, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CPFCubic(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetValue(self, *args): return _clop_swig.CPFCubic_GetValue(self, *args)
    def GetMax(self, *args): return _clop_swig.CPFCubic_GetMax(self, *args)
    def GetMonomials(self, *args): return _clop_swig.CPFCubic_GetMonomials(self, *args)
    def GetGradient(self, *args): return _clop_swig.CPFCubic_GetGradient(self, *args)
    __swig_destroy__ = _clop_swig.delete_CPFCubic
    __del__ = lambda self : None;
CPFCubic_swigregister = _clop_swig.CPFCubic_swigregister
CPFCubic_swigregister(CPFCubic)

class CPFGaussian(CParametricFunction):
    __swig_setmethods__ = {}
    for _s in [CParametricFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPFGaussian, name, value)
    __swig_getmethods__ = {}
    for _s in [CParametricFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPFGaussian, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CPFGaussian(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetValue(self, *args): return _clop_swig.CPFGaussian_GetValue(self, *args)
    def GetMonomials(self, *args): return _clop_swig.CPFGaussian_GetMonomials(self, *args)
    def GetGradient(self, *args): return _clop_swig.CPFGaussian_GetGradient(self, *args)
    __swig_destroy__ = _clop_swig.delete_CPFGaussian
    __del__ = lambda self : None;
CPFGaussian_swigregister = _clop_swig.CPFGaussian_swigregister
CPFGaussian_swigregister(CPFGaussian)

class CPFConcave(CParametricFunction):
    __swig_setmethods__ = {}
    for _s in [CParametricFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPFConcave, name, value)
    __swig_getmethods__ = {}
    for _s in [CParametricFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPFConcave, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CPFConcave(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetMonomials(self, *args): return _clop_swig.CPFConcave_GetMonomials(self, *args)
    def GetGradient(self, *args): return _clop_swig.CPFConcave_GetGradient(self, *args)
    def GetPriorParam(self, *args): return _clop_swig.CPFConcave_GetPriorParam(self, *args)
    def GetPrior(self, *args): return _clop_swig.CPFConcave_GetPrior(self, *args)
    def GetPriorGradient(self, *args): return _clop_swig.CPFConcave_GetPriorGradient(self, *args)
    def GetPriorHessian(self, *args): return _clop_swig.CPFConcave_GetPriorHessian(self, *args)
    __swig_destroy__ = _clop_swig.delete_CPFConcave
    __del__ = lambda self : None;
CPFConcave_swigregister = _clop_swig.CPFConcave_swigregister
CPFConcave_swigregister(CPFConcave)

class CSamplingPolicy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSamplingPolicy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CSamplingPolicy, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Seed(self, *args): return _clop_swig.CSamplingPolicy_Seed(self, *args)
    def Reserve(self, *args): return _clop_swig.CSamplingPolicy_Reserve(self, *args)
    def NextSample(self, *args): return _clop_swig.CSamplingPolicy_NextSample(self, *args)
    def IsFlexible(self): return _clop_swig.CSamplingPolicy_IsFlexible(self)
    __swig_destroy__ = _clop_swig.delete_CSamplingPolicy
    __del__ = lambda self : None;
CSamplingPolicy_swigregister = _clop_swig.CSamplingPolicy_swigregister
CSamplingPolicy_swigregister(CSamplingPolicy)

class CSPUniform(CSamplingPolicy):
    __swig_setmethods__ = {}
    for _s in [CSamplingPolicy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSPUniform, name, value)
    __swig_getmethods__ = {}
    for _s in [CSamplingPolicy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSPUniform, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CSPUniform(*args)
        try: self.this.append(this)
        except: self.this = this
    def Seed(self, *args): return _clop_swig.CSPUniform_Seed(self, *args)
    def NextSample(self, *args): return _clop_swig.CSPUniform_NextSample(self, *args)
    __swig_destroy__ = _clop_swig.delete_CSPUniform
    __del__ = lambda self : None;
CSPUniform_swigregister = _clop_swig.CSPUniform_swigregister
CSPUniform_swigregister(CSPUniform)

class CSPDyadic(CSamplingPolicy):
    __swig_setmethods__ = {}
    for _s in [CSamplingPolicy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSPDyadic, name, value)
    __swig_getmethods__ = {}
    for _s in [CSamplingPolicy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSPDyadic, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CSPDyadic(*args)
        try: self.this.append(this)
        except: self.this = this
    def NextSample(self, *args): return _clop_swig.CSPDyadic_NextSample(self, *args)
    __swig_destroy__ = _clop_swig.delete_CSPDyadic
    __del__ = lambda self : None;
CSPDyadic_swigregister = _clop_swig.CSPDyadic_swigregister
CSPDyadic_swigregister(CSPDyadic)

class CSPUCB(CSamplingPolicy):
    __swig_setmethods__ = {}
    for _s in [CSamplingPolicy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSPUCB, name, value)
    __swig_getmethods__ = {}
    for _s in [CSamplingPolicy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSPUCB, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CSPUCB(*args)
        try: self.this.append(this)
        except: self.this = this
    def Seed(self, *args): return _clop_swig.CSPUCB_Seed(self, *args)
    def NextSample(self, *args): return _clop_swig.CSPUCB_NextSample(self, *args)
    __swig_destroy__ = _clop_swig.delete_CSPUCB
    __del__ = lambda self : None;
CSPUCB_swigregister = _clop_swig.CSPUCB_swigregister
CSPUCB_swigregister(CSPUCB)

class CSPVOptimal(CSamplingPolicy):
    __swig_setmethods__ = {}
    for _s in [CSamplingPolicy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSPVOptimal, name, value)
    __swig_getmethods__ = {}
    for _s in [CSamplingPolicy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSPVOptimal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CSPVOptimal(*args)
        try: self.this.append(this)
        except: self.this = this
        #check-pythonappend CSPVOptimal::CSPVOptimal
        self.reg_reference = args[0]
        self.dfvar_reference = args[1]



    def Seed(self, *args): return _clop_swig.CSPVOptimal_Seed(self, *args)
    def NextSample(self, *args): return _clop_swig.CSPVOptimal_NextSample(self, *args)
    def Reserve(self, *args): return _clop_swig.CSPVOptimal_Reserve(self, *args)
    __swig_destroy__ = _clop_swig.delete_CSPVOptimal
    __del__ = lambda self : None;
CSPVOptimal_swigregister = _clop_swig.CSPVOptimal_swigregister
CSPVOptimal_swigregister(CSPVOptimal)

class CSPQLRMax(CSamplingPolicy):
    __swig_setmethods__ = {}
    for _s in [CSamplingPolicy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSPQLRMax, name, value)
    __swig_getmethods__ = {}
    for _s in [CSamplingPolicy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSPQLRMax, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CSPQLRMax(*args)
        try: self.this.append(this)
        except: self.this = this
        #check-pythonappend CSPQLRMax::CSPQLRMax
        self.reg_reference = args[0]



    def Seed(self, *args): return _clop_swig.CSPQLRMax_Seed(self, *args)
    def NextSample(self, *args): return _clop_swig.CSPQLRMax_NextSample(self, *args)
    __swig_destroy__ = _clop_swig.delete_CSPQLRMax
    __del__ = lambda self : None;
CSPQLRMax_swigregister = _clop_swig.CSPQLRMax_swigregister
CSPQLRMax_swigregister(CSPQLRMax)

class CSPComposite(CSamplingPolicy):
    __swig_setmethods__ = {}
    for _s in [CSamplingPolicy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSPComposite, name, value)
    __swig_getmethods__ = {}
    for _s in [CSamplingPolicy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSPComposite, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CSPComposite(*args)
        try: self.this.append(this)
        except: self.this = this
        #check-pythonappend CSPComposite::CSPComposite
        self.reg_reference = args[0]
        self.sp1_reference = args[1]
        self.sp2_reference = args[2]



    def Seed(self, *args): return _clop_swig.CSPComposite_Seed(self, *args)
    def NextSample(self, *args): return _clop_swig.CSPComposite_NextSample(self, *args)
    __swig_destroy__ = _clop_swig.delete_CSPComposite
    __del__ = lambda self : None;
CSPComposite_swigregister = _clop_swig.CSPComposite_swigregister
CSPComposite_swigregister(CSPComposite)

class CSPCOptimal(CSamplingPolicy):
    __swig_setmethods__ = {}
    for _s in [CSamplingPolicy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSPCOptimal, name, value)
    __swig_getmethods__ = {}
    for _s in [CSamplingPolicy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSPCOptimal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CSPCOptimal(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetMin(self): return _clop_swig.CSPCOptimal_GetMin(self)
    def GetMax(self): return _clop_swig.CSPCOptimal_GetMax(self)
    def NextSample(self, *args): return _clop_swig.CSPCOptimal_NextSample(self, *args)
    __swig_destroy__ = _clop_swig.delete_CSPCOptimal
    __del__ = lambda self : None;
CSPCOptimal_swigregister = _clop_swig.CSPCOptimal_swigregister
CSPCOptimal_swigregister(CSPCOptimal)

class CSPCOptimalMAP(CSamplingPolicy):
    __swig_setmethods__ = {}
    for _s in [CSamplingPolicy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSPCOptimalMAP, name, value)
    __swig_getmethods__ = {}
    for _s in [CSamplingPolicy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSPCOptimalMAP, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CSPCOptimalMAP(*args)
        try: self.this.append(this)
        except: self.this = this
    def NextSample(self, *args): return _clop_swig.CSPCOptimalMAP_NextSample(self, *args)
    __swig_destroy__ = _clop_swig.delete_CSPCOptimalMAP
    __del__ = lambda self : None;
CSPCOptimalMAP_swigregister = _clop_swig.CSPCOptimalMAP_swigregister
CSPCOptimalMAP_swigregister(CSPCOptimalMAP)

class CSPWeight(CSamplingPolicy):
    __swig_setmethods__ = {}
    for _s in [CSamplingPolicy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSPWeight, name, value)
    __swig_getmethods__ = {}
    for _s in [CSamplingPolicy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSPWeight, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CSPWeight(*args)
        try: self.this.append(this)
        except: self.this = this
    def Seed(self, *args): return _clop_swig.CSPWeight_Seed(self, *args)
    def NextSample(self, *args): return _clop_swig.CSPWeight_NextSample(self, *args)
    __swig_destroy__ = _clop_swig.delete_CSPWeight
    __del__ = lambda self : None;
CSPWeight_swigregister = _clop_swig.CSPWeight_swigregister
CSPWeight_swigregister(CSPWeight)

class CDiffFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDiffFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CDiffFunction, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetDimensions(self): return _clop_swig.CDiffFunction_GetDimensions(self)
    def GetOutput(self, *args): return _clop_swig.CDiffFunction_GetOutput(self, *args)
    def ComputeGradient(self): return _clop_swig.CDiffFunction_ComputeGradient(self)
    def GetGradient(self): return _clop_swig.CDiffFunction_GetGradient(self)
    def ComputeHessian(self): return _clop_swig.CDiffFunction_ComputeHessian(self)
    def GetHessian(self): return _clop_swig.CDiffFunction_GetHessian(self)
    def Normalize(self, *args): return _clop_swig.CDiffFunction_Normalize(self, *args)
    def Newton(self, *args): return _clop_swig.CDiffFunction_Newton(self, *args)
    def SteepestDescent(self, *args): return _clop_swig.CDiffFunction_SteepestDescent(self, *args)
    def CG(self, *args): return _clop_swig.CDiffFunction_CG(self, *args)
    def LineOpt(self, *args): return _clop_swig.CDiffFunction_LineOpt(self, *args)
    __swig_destroy__ = _clop_swig.delete_CDiffFunction
    __del__ = lambda self : None;
CDiffFunction_swigregister = _clop_swig.CDiffFunction_swigregister
CDiffFunction_swigregister(CDiffFunction)

class CDFVariance(CDiffFunction):
    __swig_setmethods__ = {}
    for _s in [CDiffFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDFVariance, name, value)
    __swig_getmethods__ = {}
    for _s in [CDiffFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDFVariance, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CDFVariance(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetOutput(self, *args): return _clop_swig.CDFVariance_GetOutput(self, *args)
    def ComputeGradient(self): return _clop_swig.CDFVariance_ComputeGradient(self)
    def GetGradient(self): return _clop_swig.CDFVariance_GetGradient(self)
    def GetHessian(self): return _clop_swig.CDFVariance_GetHessian(self)
    def Normalize(self, *args): return _clop_swig.CDFVariance_Normalize(self, *args)
    def SelectAtRandom(self, *args): return _clop_swig.CDFVariance_SelectAtRandom(self, *args)
    def GetVariance(self): return _clop_swig.CDFVariance_GetVariance(self)
    def GetMinSamples(self): return _clop_swig.CDFVariance_GetMinSamples(self)
    def SetMinSamples(self, *args): return _clop_swig.CDFVariance_SetMinSamples(self, *args)
    __swig_destroy__ = _clop_swig.delete_CDFVariance
    __del__ = lambda self : None;
CDFVariance_swigregister = _clop_swig.CDFVariance_swigregister
CDFVariance_swigregister(CDFVariance)

class CDFConfidence(CDFVariance):
    __swig_setmethods__ = {}
    for _s in [CDFVariance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDFConfidence, name, value)
    __swig_getmethods__ = {}
    for _s in [CDFVariance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDFConfidence, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CDFConfidence(*args)
        try: self.this.append(this)
        except: self.this = this
    def ComputeVariance(self, *args): return _clop_swig.CDFConfidence_ComputeVariance(self, *args)
    def GetDeviation(self): return _clop_swig.CDFConfidence_GetDeviation(self)
    def GetVariance(self): return _clop_swig.CDFConfidence_GetVariance(self)
    __swig_destroy__ = _clop_swig.delete_CDFConfidence
    __del__ = lambda self : None;
CDFConfidence_swigregister = _clop_swig.CDFConfidence_swigregister
CDFConfidence_swigregister(CDFConfidence)

class CDFVarianceAlpha(CDFConfidence):
    __swig_setmethods__ = {}
    for _s in [CDFConfidence]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDFVarianceAlpha, name, value)
    __swig_getmethods__ = {}
    for _s in [CDFConfidence]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDFVarianceAlpha, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CDFVarianceAlpha(*args)
        try: self.this.append(this)
        except: self.this = this
        #check-pythonappend CDFVarianceAlpha::CDFVarianceAlpha
        self.reg_reference = args[0]



    def GetOutput(self, *args): return _clop_swig.CDFVarianceAlpha_GetOutput(self, *args)
    def ComputeGradient(self): return _clop_swig.CDFVarianceAlpha_ComputeGradient(self)
    __swig_destroy__ = _clop_swig.delete_CDFVarianceAlpha
    __del__ = lambda self : None;
CDFVarianceAlpha_swigregister = _clop_swig.CDFVarianceAlpha_swigregister
CDFVarianceAlpha_swigregister(CDFVarianceAlpha)

class CDFVarianceDelta(CDFVariance):
    __swig_setmethods__ = {}
    for _s in [CDFVariance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDFVarianceDelta, name, value)
    __swig_getmethods__ = {}
    for _s in [CDFVariance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDFVarianceDelta, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CDFVarianceDelta(*args)
        try: self.this.append(this)
        except: self.this = this
        #check-pythonappend CDFVarianceDelta::CDFVarianceDelta
        self.reg_reference = args[0]



    def GetOutput(self, *args): return _clop_swig.CDFVarianceDelta_GetOutput(self, *args)
    def ComputeGradient(self): return _clop_swig.CDFVarianceDelta_ComputeGradient(self)
    def GetVariance(self): return _clop_swig.CDFVarianceDelta_GetVariance(self)
    __swig_destroy__ = _clop_swig.delete_CDFVarianceDelta
    __del__ = lambda self : None;
CDFVarianceDelta_swigregister = _clop_swig.CDFVarianceDelta_swigregister
CDFVarianceDelta_swigregister(CDFVarianceDelta)

class CMaxEstimator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMaxEstimator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CMaxEstimator, name)
    __repr__ = _swig_repr
    def Reserve(self, *args): return _clop_swig.CMaxEstimator_Reserve(self, *args)
    def MaxParameter(self, *args): return _clop_swig.CMaxEstimator_MaxParameter(self, *args)
    __swig_destroy__ = _clop_swig.delete_CMaxEstimator
    __del__ = lambda self : None;
    def __init__(self): 
        this = _clop_swig.new_CMaxEstimator()
        try: self.this.append(this)
        except: self.this = this
CMaxEstimator_swigregister = _clop_swig.CMaxEstimator_swigregister
CMaxEstimator_swigregister(CMaxEstimator)

class CMERegressionMAPMax(CMaxEstimator):
    __swig_setmethods__ = {}
    for _s in [CMaxEstimator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMERegressionMAPMax, name, value)
    __swig_getmethods__ = {}
    for _s in [CMaxEstimator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMERegressionMAPMax, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CMERegressionMAPMax(*args)
        try: self.this.append(this)
        except: self.this = this
        #check-pythonappend CMERegressionMAPMax::CMERegressionMAPMax
        self.reg_reference = args[0]



    def MaxParameter(self, *args): return _clop_swig.CMERegressionMAPMax_MaxParameter(self, *args)
    __swig_destroy__ = _clop_swig.delete_CMERegressionMAPMax
    __del__ = lambda self : None;
CMERegressionMAPMax_swigregister = _clop_swig.CMERegressionMAPMax_swigregister
CMERegressionMAPMax_swigregister(CMERegressionMAPMax)

class CMEQLRLCB(CMaxEstimator):
    __swig_setmethods__ = {}
    for _s in [CMaxEstimator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMEQLRLCB, name, value)
    __swig_getmethods__ = {}
    for _s in [CMaxEstimator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMEQLRLCB, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CMEQLRLCB(*args)
        try: self.this.append(this)
        except: self.this = this
        #check-pythonappend CMEQLRLCB::CMEQLRLCB
        self.reg_reference = args[0]



    def MaxParameter(self, *args): return _clop_swig.CMEQLRLCB_MaxParameter(self, *args)
    __swig_destroy__ = _clop_swig.delete_CMEQLRLCB
    __del__ = lambda self : None;
CMEQLRLCB_swigregister = _clop_swig.CMEQLRLCB_swigregister
CMEQLRLCB_swigregister(CMEQLRLCB)

class CMESampleMean(CMaxEstimator):
    __swig_setmethods__ = {}
    for _s in [CMaxEstimator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMESampleMean, name, value)
    __swig_getmethods__ = {}
    for _s in [CMaxEstimator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMESampleMean, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CMESampleMean(*args)
        try: self.this.append(this)
        except: self.this = this
    def MaxParameter(self, *args): return _clop_swig.CMESampleMean_MaxParameter(self, *args)
    __swig_destroy__ = _clop_swig.delete_CMESampleMean
    __del__ = lambda self : None;
CMESampleMean_swigregister = _clop_swig.CMESampleMean_swigregister
CMESampleMean_swigregister(CMESampleMean)

class CBAST(CSamplingPolicy,CMaxEstimator):
    __swig_setmethods__ = {}
    for _s in [CSamplingPolicy,CMaxEstimator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBAST, name, value)
    __swig_getmethods__ = {}
    for _s in [CSamplingPolicy,CMaxEstimator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CBAST, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CBAST(*args)
        try: self.this.append(this)
        except: self.this = this
        #check-pythonappend CBAST::CBAST
        self.results_reference = args[0]



    def NextSample(self, *args): return _clop_swig.CBAST_NextSample(self, *args)
    def IsFlexible(self): return _clop_swig.CBAST_IsFlexible(self)
    def MaxParameter(self, *args): return _clop_swig.CBAST_MaxParameter(self, *args)
    def Reserve(self, *args): return _clop_swig.CBAST_Reserve(self, *args)
    __swig_destroy__ = _clop_swig.delete_CBAST
    __del__ = lambda self : None;
CBAST_swigregister = _clop_swig.CBAST_swigregister
CBAST_swigregister(CBAST)

class CCrossEntropy(CSamplingPolicy,CMaxEstimator):
    __swig_setmethods__ = {}
    for _s in [CSamplingPolicy,CMaxEstimator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCrossEntropy, name, value)
    __swig_getmethods__ = {}
    for _s in [CSamplingPolicy,CMaxEstimator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCrossEntropy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CCrossEntropy(*args)
        try: self.this.append(this)
        except: self.this = this
        #check-pythonappend CCrossEntropy::CCrossEntropy
        self.results_reference = args[0]



    def Seed(self, *args): return _clop_swig.CCrossEntropy_Seed(self, *args)
    def NextSample(self, *args): return _clop_swig.CCrossEntropy_NextSample(self, *args)
    def IsFlexible(self): return _clop_swig.CCrossEntropy_IsFlexible(self)
    def MaxParameter(self, *args): return _clop_swig.CCrossEntropy_MaxParameter(self, *args)
    __swig_destroy__ = _clop_swig.delete_CCrossEntropy
    __del__ = lambda self : None;
CCrossEntropy_swigregister = _clop_swig.CCrossEntropy_swigregister
CCrossEntropy_swigregister(CCrossEntropy)

class CSPSA(CSamplingPolicy,CMaxEstimator):
    __swig_setmethods__ = {}
    for _s in [CSamplingPolicy,CMaxEstimator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSPSA, name, value)
    __swig_getmethods__ = {}
    for _s in [CSamplingPolicy,CMaxEstimator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSPSA, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CSPSA(*args)
        try: self.this.append(this)
        except: self.this = this
        #check-pythonappend CSPSA::CSPSA
        self.results_reference = args[0]



    def Seed(self, *args): return _clop_swig.CSPSA_Seed(self, *args)
    def NextSample(self, *args): return _clop_swig.CSPSA_NextSample(self, *args)
    def IsFlexible(self): return _clop_swig.CSPSA_IsFlexible(self)
    def MaxParameter(self, *args): return _clop_swig.CSPSA_MaxParameter(self, *args)
    __swig_destroy__ = _clop_swig.delete_CSPSA
    __del__ = lambda self : None;
CSPSA_swigregister = _clop_swig.CSPSA_swigregister
CSPSA_swigregister(CSPSA)

class CRSPSA(CSamplingPolicy,CMaxEstimator):
    __swig_setmethods__ = {}
    for _s in [CSamplingPolicy,CMaxEstimator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRSPSA, name, value)
    __swig_getmethods__ = {}
    for _s in [CSamplingPolicy,CMaxEstimator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CRSPSA, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CRSPSA(*args)
        try: self.this.append(this)
        except: self.this = this
        #check-pythonappend CRSPSA::CRSPSA
        self.results_reference = args[0]



    def Seed(self, *args): return _clop_swig.CRSPSA_Seed(self, *args)
    def NextSample(self, *args): return _clop_swig.CRSPSA_NextSample(self, *args)
    def IsFlexible(self): return _clop_swig.CRSPSA_IsFlexible(self)
    def MaxParameter(self, *args): return _clop_swig.CRSPSA_MaxParameter(self, *args)
    __swig_destroy__ = _clop_swig.delete_CRSPSA
    __del__ = lambda self : None;
CRSPSA_swigregister = _clop_swig.CRSPSA_swigregister
CRSPSA_swigregister(CRSPSA)

class CRepeatThreads(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRepeatThreads, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRepeatThreads, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CRepeatThreads(*args)
        try: self.this.append(this)
        except: self.this = this
        #check-pythonappend CRepeatThreads::CRepeatThreads
        self.prtl_reference = args[2]



    def AddThread(self, *args): return _clop_swig.CRepeatThreads_AddThread(self, *args)
    def AddCheckPoint(self, *args): return _clop_swig.CRepeatThreads_AddCheckPoint(self, *args)
    def GetCheckPoints(self): return _clop_swig.CRepeatThreads_GetCheckPoints(self)
    def GetCheckPointData(self, *args): return _clop_swig.CRepeatThreads_GetCheckPointData(self, *args)
    def Start(self): return _clop_swig.CRepeatThreads_Start(self)
    def WaitForTermination(self): return _clop_swig.CRepeatThreads_WaitForTermination(self)
    __swig_destroy__ = _clop_swig.delete_CRepeatThreads
    __del__ = lambda self : None;
CRepeatThreads_swigregister = _clop_swig.CRepeatThreads_swigregister
CRepeatThreads_swigregister(CRepeatThreads)

class CArtificialExperiment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CArtificialExperiment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CArtificialExperiment, name)
    __repr__ = _swig_repr
    __swig_setmethods__["problem"] = _clop_swig.CArtificialExperiment_problem_set
    __swig_getmethods__["problem"] = _clop_swig.CArtificialExperiment_problem_get
    if _newclass:problem = _swig_property(_clop_swig.CArtificialExperiment_problem_get, _clop_swig.CArtificialExperiment_problem_set)
    __swig_setmethods__["sp"] = _clop_swig.CArtificialExperiment_sp_set
    __swig_getmethods__["sp"] = _clop_swig.CArtificialExperiment_sp_get
    if _newclass:sp = _swig_property(_clop_swig.CArtificialExperiment_sp_get, _clop_swig.CArtificialExperiment_sp_set)
    __swig_setmethods__["me"] = _clop_swig.CArtificialExperiment_me_set
    __swig_getmethods__["me"] = _clop_swig.CArtificialExperiment_me_get
    if _newclass:me = _swig_property(_clop_swig.CArtificialExperiment_me_get, _clop_swig.CArtificialExperiment_me_set)
    __swig_setmethods__["results"] = _clop_swig.CArtificialExperiment_results_set
    __swig_getmethods__["results"] = _clop_swig.CArtificialExperiment_results_get
    if _newclass:results = _swig_property(_clop_swig.CArtificialExperiment_results_get, _clop_swig.CArtificialExperiment_results_set)
    def __init__(self, *args): 
        this = _clop_swig.new_CArtificialExperiment(*args)
        try: self.this.append(this)
        except: self.this = this
        #check-pythonappend CArtificialExperiment::CArtificialExperiment
        self.problem_reference = args[0]
        self.sp_reference = args[1]
        self.me_reference = args[2]
        self.results_reference = args[3]



    def Reserve(self, *args): return _clop_swig.CArtificialExperiment_Reserve(self, *args)
    __swig_destroy__ = _clop_swig.delete_CArtificialExperiment
    __del__ = lambda self : None;
CArtificialExperiment_swigregister = _clop_swig.CArtificialExperiment_swigregister
CArtificialExperiment_swigregister(CArtificialExperiment)

class CCheckPointData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCheckPointData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCheckPointData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _clop_swig.new_CCheckPointData(*args)
        try: self.this.append(this)
        except: self.this = this
    def Collect(self, *args): return _clop_swig.CCheckPointData_Collect(self, *args)
    def GetRepeats(self): return _clop_swig.CCheckPointData_GetRepeats(self)
    def GetSamples(self): return _clop_swig.CCheckPointData_GetSamples(self)
    def GetRemainingRepeats(self): return _clop_swig.CCheckPointData_GetRemainingRepeats(self)
    def GetMaxErrorSeed(self): return _clop_swig.CCheckPointData_GetMaxErrorSeed(self)
    def GetMisses(self): return _clop_swig.CCheckPointData_GetMisses(self)
    def GetMaxError(self): return _clop_swig.CCheckPointData_GetMaxError(self)
    def GetMeanError(self): return _clop_swig.CCheckPointData_GetMeanError(self)
    def GetPercentile(self, *args): return _clop_swig.CCheckPointData_GetPercentile(self, *args)
    def GetVariance(self): return _clop_swig.CCheckPointData_GetVariance(self)
    __swig_destroy__ = _clop_swig.delete_CCheckPointData
    __del__ = lambda self : None;
CCheckPointData_swigregister = _clop_swig.CCheckPointData_swigregister
CCheckPointData_swigregister(CCheckPointData)

class CCPListener(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCPListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCPListener, name)
    __repr__ = _swig_repr
    def OnStart(self, *args): return _clop_swig.CCPListener_OnStart(self, *args)
    def OnCollect(self, *args): return _clop_swig.CCPListener_OnCollect(self, *args)
    def OnStop(self, *args): return _clop_swig.CCPListener_OnStop(self, *args)
    def Continue(self): return _clop_swig.CCPListener_Continue(self)
    __swig_destroy__ = _clop_swig.delete_CCPListener
    __del__ = lambda self : None;
    def __init__(self): 
        this = _clop_swig.new_CCPListener()
        try: self.this.append(this)
        except: self.this = this
CCPListener_swigregister = _clop_swig.CCPListener_swigregister
CCPListener_swigregister(CCPListener)

class CCPLConsole(CCPListener):
    __swig_setmethods__ = {}
    for _s in [CCPListener]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCPLConsole, name, value)
    __swig_getmethods__ = {}
    for _s in [CCPListener]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCPLConsole, name)
    __repr__ = _swig_repr
    def __init__(self, Every=1): 
        this = _clop_swig.new_CCPLConsole(Every)
        try: self.this.append(this)
        except: self.this = this
    def OnStart(self, *args): return _clop_swig.CCPLConsole_OnStart(self, *args)
    def OnCollect(self, *args): return _clop_swig.CCPLConsole_OnCollect(self, *args)
    def OnStop(self, *args): return _clop_swig.CCPLConsole_OnStop(self, *args)
    def Continue(self): return _clop_swig.CCPLConsole_Continue(self)
    __swig_destroy__ = _clop_swig.delete_CCPLConsole
    __del__ = lambda self : None;
CCPLConsole_swigregister = _clop_swig.CCPLConsole_swigregister
CCPLConsole_swigregister(CCPLConsole)

class CQLRIO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CQLRIO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CQLRIO, name)
    __repr__ = _swig_repr
    __swig_getmethods__["DumpSamples"] = lambda x: _clop_swig.CQLRIO_DumpSamples
    if _newclass:DumpSamples = staticmethod(_clop_swig.CQLRIO_DumpSamples)
    __swig_getmethods__["Plot"] = lambda x: _clop_swig.CQLRIO_Plot
    if _newclass:Plot = staticmethod(_clop_swig.CQLRIO_Plot)
    __swig_getmethods__["Distrib"] = lambda x: _clop_swig.CQLRIO_Distrib
    if _newclass:Distrib = staticmethod(_clop_swig.CQLRIO_Distrib)
    def __init__(self): 
        this = _clop_swig.new_CQLRIO()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _clop_swig.delete_CQLRIO
    __del__ = lambda self : None;
CQLRIO_swigregister = _clop_swig.CQLRIO_swigregister
CQLRIO_swigregister(CQLRIO)

def CQLRIO_DumpSamples(*args):
  return _clop_swig.CQLRIO_DumpSamples(*args)
CQLRIO_DumpSamples = _clop_swig.CQLRIO_DumpSamples

def CQLRIO_Plot(*args):
  return _clop_swig.CQLRIO_Plot(*args)
CQLRIO_Plot = _clop_swig.CQLRIO_Plot

def CQLRIO_Distrib(*args):
  return _clop_swig.CQLRIO_Distrib(*args)
CQLRIO_Distrib = _clop_swig.CQLRIO_Distrib

class CTikZ(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTikZ, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CTikZ, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetOutput(self, *args): return _clop_swig.CTikZ_SetOutput(self, *args)
    def SetScale(self, *args): return _clop_swig.CTikZ_SetScale(self, *args)
    def SetStyle(self, *args): return _clop_swig.CTikZ_SetStyle(self, *args)
    def SetGrayscale(self, *args): return _clop_swig.CTikZ_SetGrayscale(self, *args)
    def SetCircleN(self, *args): return _clop_swig.CTikZ_SetCircleN(self, *args)
    def SetSplineSamples(self, *args): return _clop_swig.CTikZ_SetSplineSamples(self, *args)
    def SetSplineD(self, *args): return _clop_swig.CTikZ_SetSplineD(self, *args)
    def Prolog(self): return _clop_swig.CTikZ_Prolog(self)
    def Epilog(self): return _clop_swig.CTikZ_Epilog(self)
    def Results(self, *args): return _clop_swig.CTikZ_Results(self, *args)
    def Key(self, *args): return _clop_swig.CTikZ_Key(self, *args)
    __swig_destroy__ = _clop_swig.delete_CTikZ
    __del__ = lambda self : None;
CTikZ_swigregister = _clop_swig.CTikZ_swigregister
CTikZ_swigregister(CTikZ)

class CTikZOneD(CTikZ):
    __swig_setmethods__ = {}
    for _s in [CTikZ]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTikZOneD, name, value)
    __swig_getmethods__ = {}
    for _s in [CTikZ]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTikZOneD, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _clop_swig.new_CTikZOneD()
        try: self.this.append(this)
        except: self.this = this
    def BeginClip(self): return _clop_swig.CTikZOneD_BeginClip(self)
    def EndClip(self): return _clop_swig.CTikZOneD_EndClip(self)
    def Posterior(self, *args): return _clop_swig.CTikZOneD_Posterior(self, *args)
    def PlotTrue(self, *args): return _clop_swig.CTikZOneD_PlotTrue(self, *args)
    def MAP(self, *args): return _clop_swig.CTikZOneD_MAP(self, *args)
    def Expected(self, *args): return _clop_swig.CTikZOneD_Expected(self, *args)
    def Confidence(self, *args): return _clop_swig.CTikZOneD_Confidence(self, *args)
    def LCB(self, *args): return _clop_swig.CTikZOneD_LCB(self, *args)
    def Frame(self, *args): return _clop_swig.CTikZOneD_Frame(self, *args)
    def Key(self): return _clop_swig.CTikZOneD_Key(self)
    __swig_destroy__ = _clop_swig.delete_CTikZOneD
    __del__ = lambda self : None;
CTikZOneD_swigregister = _clop_swig.CTikZOneD_swigregister
CTikZOneD_swigregister(CTikZOneD)

class CTikZTwoD(CTikZ):
    __swig_setmethods__ = {}
    for _s in [CTikZ]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTikZTwoD, name, value)
    __swig_getmethods__ = {}
    for _s in [CTikZ]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTikZTwoD, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _clop_swig.new_CTikZTwoD()
        try: self.this.append(this)
        except: self.this = this
    def SetContourResolution(self, *args): return _clop_swig.CTikZTwoD_SetContourResolution(self, *args)
    def BeginClip(self): return _clop_swig.CTikZTwoD_BeginClip(self)
    def EndClip(self): return _clop_swig.CTikZTwoD_EndClip(self)
    def Posterior(self, *args): return _clop_swig.CTikZTwoD_Posterior(self, *args)
    def PlotTrue(self, *args): return _clop_swig.CTikZTwoD_PlotTrue(self, *args)
    def Contour(self, *args): return _clop_swig.CTikZTwoD_Contour(self, *args)
    def MAP(self, *args): return _clop_swig.CTikZTwoD_MAP(self, *args)
    def Key(self): return _clop_swig.CTikZTwoD_Key(self)
    def Frame(self, Samples=0, fLabels=True): return _clop_swig.CTikZTwoD_Frame(self, Samples, fLabels)
    __swig_destroy__ = _clop_swig.delete_CTikZTwoD
    __del__ = lambda self : None;
CTikZTwoD_swigregister = _clop_swig.CTikZTwoD_swigregister
CTikZTwoD_swigregister(CTikZTwoD)

class CMatrixOperations(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMatrixOperations, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CMatrixOperations, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Cholesky"] = lambda x: _clop_swig.CMatrixOperations_Cholesky
    if _newclass:Cholesky = staticmethod(_clop_swig.CMatrixOperations_Cholesky)
    __swig_getmethods__["Inverse"] = lambda x: _clop_swig.CMatrixOperations_Inverse
    if _newclass:Inverse = staticmethod(_clop_swig.CMatrixOperations_Inverse)
    __swig_getmethods__["Solve"] = lambda x: _clop_swig.CMatrixOperations_Solve
    if _newclass:Solve = staticmethod(_clop_swig.CMatrixOperations_Solve)
    __swig_getmethods__["Square"] = lambda x: _clop_swig.CMatrixOperations_Square
    if _newclass:Square = staticmethod(_clop_swig.CMatrixOperations_Square)
    __swig_getmethods__["Jacobi"] = lambda x: _clop_swig.CMatrixOperations_Jacobi
    if _newclass:Jacobi = staticmethod(_clop_swig.CMatrixOperations_Jacobi)
    __swig_getmethods__["JacobiSort"] = lambda x: _clop_swig.CMatrixOperations_JacobiSort
    if _newclass:JacobiSort = staticmethod(_clop_swig.CMatrixOperations_JacobiSort)
    def __init__(self): 
        this = _clop_swig.new_CMatrixOperations()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _clop_swig.delete_CMatrixOperations
    __del__ = lambda self : None;
CMatrixOperations_swigregister = _clop_swig.CMatrixOperations_swigregister
CMatrixOperations_swigregister(CMatrixOperations)

def CMatrixOperations_Cholesky(*args):
  return _clop_swig.CMatrixOperations_Cholesky(*args)
CMatrixOperations_Cholesky = _clop_swig.CMatrixOperations_Cholesky

def CMatrixOperations_Inverse(*args):
  return _clop_swig.CMatrixOperations_Inverse(*args)
CMatrixOperations_Inverse = _clop_swig.CMatrixOperations_Inverse

def CMatrixOperations_Solve(*args):
  return _clop_swig.CMatrixOperations_Solve(*args)
CMatrixOperations_Solve = _clop_swig.CMatrixOperations_Solve

def CMatrixOperations_Square(*args):
  return _clop_swig.CMatrixOperations_Square(*args)
CMatrixOperations_Square = _clop_swig.CMatrixOperations_Square

def CMatrixOperations_Jacobi(*args):
  return _clop_swig.CMatrixOperations_Jacobi(*args)
CMatrixOperations_Jacobi = _clop_swig.CMatrixOperations_Jacobi

def CMatrixOperations_JacobiSort(*args):
  return _clop_swig.CMatrixOperations_JacobiSort(*args)
CMatrixOperations_JacobiSort = _clop_swig.CMatrixOperations_JacobiSort

# This file is compatible with both classic and new-style classes.


